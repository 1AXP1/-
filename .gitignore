import mne
import numpy as np
import pandas as pd
from scipy.fft import fft, ifft
from scipy.signal import find_peaks

results = pd.DataFrame(columns=['Запись', 'Средневзвешенная_амплитуда', 'Относительная_мощность'])

def process_signal(signal, fs, t0_idx, t1_idx):
    spectrum = fft(signal)
    freqs = np.fft.fftfreq(len(signal), 1/fs)
    spectrum[(freqs < 8) | (freqs > 14)] = 0
    
    reconstructed = ifft(spectrum).real
    segment = reconstructed[t0_idx:t1_idx]
    
    peaks, _ = find_peaks(segment)
    if len(peaks) < 3:  # Минимум 3 точки для определения пика
        return 0.0, 0.0
    
    amplitudes = segment[peaks]
    avg = np.mean(amplitudes)
    high_amplitudes = amplitudes[amplitudes > avg]
    
    weighted_amp = np.mean(high_amplitudes) if len(high_amplitudes) > 0 else 0.0
    
    segment_spectrum = np.abs(fft(segment))
    total_power = np.sum(segment_spectrum)
    alpha_power = np.sum(segment_spectrum[(freqs[:len(segment)] >= 8) & (freqs[:len(segment)] <= 14)])
    relative_power = 100 * alpha_power / total_power if total_power != 0 else 0.0
    
    return weighted_amp, relative_power

for record_id in range(1, 21):
    try:
        file_path = f'record_{record_id}.edf'
        raw = mne.io.read_raw_edf(file_path, preload=True)
        
        fs = raw.info['sfreq']  # Частота дискретизации
        annotations = raw.annotations
        O1_data, _ = raw['O1']
        O2_data, _ = raw['O2']
        
        fpce_indices = [i for i, desc in enumerate(annotations.description) if '[FPCE]' in desc]
        if not fpce_indices:
            print(f"В записи {record_id} нет аннотации [FPCE]")
            continue
            
        t0_idx = int(annotations.onset[fpce_indices[-1]] * fs)  # Последняя аннотация [FPCE]
        t1_idx = int(annotations.onset[fpce_indices[-1] + 1] * fs) if fpce_indices[-1] + 1 < len(annotations) else len(O1_data[0])
        
        amp_O1, power_O1 = process_signal(O1_data[0], fs, t0_idx, t1_idx)
        amp_O2, power_O2 = process_signal(O2_data[0], fs, t0_idx, t1_idx)
        
        avg_amp = (amp_O1 + amp_O2) / 2
        avg_power = (power_O1 + power_O2) / 2

        results = pd.concat([
            results,
            pd.DataFrame([{
                'Запись': record_id,
                'Средневзвешенная_амплитуда': avg_amp,
                'Относительная_мощность': avg_power
            }])
        ], ignore_index=True)

    except FileNotFoundError:
        print(f"Файл record_{record_id}.edf не найден")

results.to_csv('результаты_анализа_edf.csv', index=False, encoding='utf-8-sig')
print("Обработка завершена. Результаты сохранены в файл 'результаты_анализа_edf.csv'")
